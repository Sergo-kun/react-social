{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem.jsx","components/Dialogs/MessagesItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","id","name","className","classes","dialog","to","activeClassName","active","MessagesItem","message","Dialogs","props","dialogMap","map","d","messageMap","m","dialogs","dialogItem","messages","textSend","onChange","event","text","target","value","updateNewMessageText","newMessageText","onClick","sendMessage","DialogsContainer","this","isAuth","React","Component","compose","connect","store","dialogPage","auth","withAuthRedirect"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,wBAAwB,YAAc,6BAA6B,SAAW,0BAA0B,SAAW,4B,iICUnMC,MANf,YAAiC,IAAZC,EAAW,EAAXA,GAAIC,EAAO,EAAPA,KACrB,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SAAgC,cAAC,IAAD,CAASC,GAAI,aAAeL,EAAIM,gBAAiBH,IAAQI,OAAzD,SAAkEN,OCC3FO,EALM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OACI,qBAAKP,UAAWC,IAAQC,OAAxB,SAAiCK,K,SCkC1BC,EAhCC,SAACC,GAEb,IAAIC,EAAYD,EAAMP,OAAOS,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYd,GAAIc,EAAEd,GAAIC,KAAMa,EAAEb,UAChEc,EAAaJ,EAAMF,QAAQI,KAAI,SAAAG,GAAC,OAAI,cAAC,EAAD,CAAcP,QAASO,EAAEP,aAejE,OACI,sBAAKP,UAAWC,IAAQc,QAAxB,UACI,qBAAKf,UAAWC,IAAQe,WAAxB,SACKN,IAEL,qBAAKV,UAAWC,IAAQgB,SAAxB,SACKJ,IAEL,qBAAKb,UAAWC,IAAQiB,SAAxB,SAAkC,0BAAUC,SAdhC,SAACC,GACjB,IAAIC,EAAOD,EAAME,OAAOC,MACxBd,EAAMe,qBAAqBH,IAY+CE,MAAOd,EAAMgB,mBACnF,8BAAK,wBAAQC,QApBJ,WACbjB,EAAMkB,eAmBG,wB,+BCtBXC,E,4JAGN,WAEI,OAAKC,KAAKpB,MAAMqB,OAGZ,cAAC,EAAD,eAAaD,KAAKpB,QAHS,cAAC,IAAD,CAAUN,GAAI,e,GALlB4B,IAAMC,WAwBtBC,sBAASC,aATT,SAACC,GACZ,MAAO,CACHjC,OAAQiC,EAAMC,WAAWrB,QACzBR,QAAS4B,EAAMC,WAAWnB,SAC1BQ,eAAgBU,EAAMC,WAAWX,eACjCK,OAAQK,EAAME,KAAKP,UAIc,CAACH,gBAAaH,2BACnDc,IADWL,CAEdL","file":"static/js/3.e0faa767.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2D-EY\",\"dialog\":\"Dialogs_dialog__2uHwN\",\"active\":\"Dialogs_active__2Mrgw\",\"dialogItems\":\"Dialogs_dialogItems__Lbbor\",\"messages\":\"Dialogs_messages__9pnxR\",\"textSend\":\"Dialogs_textSend__36uyp\"};","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nfunction DialogItem({id, name}) {\r\n    return (\r\n        <div className={classes.dialog}><NavLink to={'/messages/' + id} activeClassName={classes.active}>{name}</NavLink></div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\n\r\nconst MessagesItem = ({message}) => {\r\n    return (\r\n        <div className={classes.dialog}>{message}</div>\r\n    );\r\n}\r\nexport default MessagesItem;","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem\";\r\nimport MessagesItem from \"./MessagesItem\";\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogMap = props.dialog.map(d => <DialogItem id={d.id} name={d.name}/>);\r\n    let messageMap = props.message.map(m => <MessagesItem message={m.message}/>);\r\n\r\n\r\n\r\n    let buttonSend = () => {\r\n        props.sendMessage();\r\n\r\n\r\n    }\r\n    let textingUpdate = (event) => { //event - событие которое произошло с texteria\r\n        let text = event.target.value; // target - с помощу него мі достучимся к елемента event\r\n        props.updateNewMessageText(text);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItem}>\r\n                {dialogMap}\r\n                </div>\r\n            <div className={classes.messages}>\r\n                {messageMap}\r\n            </div>\r\n            <div className={classes.textSend}><textarea onChange={textingUpdate}  value={props.newMessageText}/></div>\r\n            <div><button onClick={buttonSend}>Send</button></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem\";\r\nimport MessagesItem from \"./MessagesItem\";\r\nimport {sendMessage, updateNewMessageText} from \"../../redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass DialogsContainer extends React.Component{\r\n\r\n\r\nrender() {\r\n\r\n    if (!this.props.isAuth) return <Redirect to={'/login'}/>;\r\n\r\n    return(\r\n        <Dialogs {...this.props}/>\r\n    )\r\n}\r\n\r\n\r\n}\r\n\r\nlet mapStore = (store) => {\r\n    return {\r\n        dialog: store.dialogPage.dialogs,\r\n        message: store.dialogPage.messages,\r\n        newMessageText: store.dialogPage.newMessageText,\r\n        isAuth: store.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose( connect(mapStore,{sendMessage, updateNewMessageText}),\r\n    withAuthRedirect)\r\n(DialogsContainer)\r\n\r\n"],"sourceRoot":""}